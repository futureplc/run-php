#!/usr/bin/env php
<?php

function _run_file(array $argv): void
{
    if (!isset($argv[1])) {
        echo 'No file found to run.';
        exit;
    }

    $fileToRun = $argv[1];
    $autoloadRootDirectory = dirname($fileToRun);

    $autoloadFileSuffix = '/vendor/autoload.php';
    $autoloadFile = $autoloadRootDirectory . $autoloadFileSuffix;

    while (!file_exists($autoloadFile)) {
        $autoloadRootDirectory = realpath(dirname($autoloadRootDirectory));
        $autoloadFile = $autoloadRootDirectory . $autoloadFileSuffix;

        if ($autoloadRootDirectory === '/') {
            break;
        }
    }

    if (file_exists($autoloadFile)) {
        ob_start();
        require_once $autoloadFile;
        ob_clean();

        $loader = new _ClassAliasAutoloader($autoloadRootDirectory);
        spl_autoload_register($loader->aliasClass(...));
    }

    require $fileToRun;
}

class _ClassAliasAutoloader
{
    /** All of the discovered classes. */
    protected array $classes = [];

    public function __construct(string $autoloadRootDirectory)
    {
        $classes = require "{$autoloadRootDirectory}/vendor/composer/autoload_classmap.php";

        foreach ($classes as $class => $path) {
            if (!str_contains($class, '\\')) {
                continue;
            }

            $name = basename(str_replace('\\', '/', $class));

            if (!isset($this->classes[$name]) && class_exists($name)) {
                $this->classes[$name] = $class;
            }
        }

        $psr4 = require "{$autoloadRootDirectory}/vendor/composer/autoload_psr4.php";

        foreach ($psr4 as $namespace => $directories) {
            foreach ($directories as $directory) {
                if (!file_exists($directory)) {
                    continue;
                }
                $iterator = new RecursiveIteratorIterator(
                    new RecursiveDirectoryIterator($directory),
                    RecursiveIteratorIterator::LEAVES_ONLY
                );

                foreach ($iterator as $file) {
                    if ($file->isFile() && $file->getExtension() === 'php') {
                        $classNamespace = $namespace;

                        $relativePath = str_replace($directory . DIRECTORY_SEPARATOR, '', $file->getPath());
                        if (!empty($relativePath)) {
                            $classNamespace .= strtr($relativePath, DIRECTORY_SEPARATOR, '\\') . '\\';
                        }

                        $basename = $file->getBasename('.php');
                        $class = $classNamespace . $basename;

                        if (str_ends_with($basename, 'Test')) {
                            continue;
                        }

                        $this->classes[$basename] = $class;
                    }
                }
            }
        }
    }

    /** Find the closest class by name. */
    public function aliasClass(string $class): void
    {
        if (str_contains($class, '\\')) {
            return;
        }

        $fullName = $this->classes[$class] ?? false;

        if ($fullName) {
            if (class_exists($fullName)) {
                echo "Aliasing '{$class}' to '{$fullName}'\n";
                class_alias($fullName, $class);
            }
        }
    }
}

_run_file($argv);
